apply plugin: 'com.android.application'
apply plugin: 'jacoco'

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
    reports {
        xml.enabled = true
        html.enabled = true
    }
    def fileFilter = [
            '**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*$ViewInjector*.*',
            '**/*$ViewBinder*.*', '**/*$Lambda$*.*', '**/*Module.*', '**/*Dagger*.*',
            '**/*MembersInjector*.*', '**/*_Provide*Factory*.*', '**/*_Factory.*', '**/*$*$*.*',
            'android/**/*.*', 'com/**/*.*', 'uk/**/*.*', 'io/**/*.*', 'androidTest/**/*.*',
            '**/*Test*.*', 'test/**/*.*', '**/injector/**/*.*', '**/model/**/*.*', '**/mock/**/*.*',
            '**/event/**/*.*', '**/**_ViewBinding**', '**/*EventType.*', '**/**Mocked'
    ]
//    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}

android {
    compileSdkVersion 25
    defaultConfig {
        applicationId "com.owsega.hackernews"
        minSdkVersion 11
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            minifyEnabled false
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
}

dependencies {
    final RETROFIT_VERSION = '2.3.0'
    final BUTTERKNIFE_VERSION = '8.7.0'

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:25.4.0'
    implementation 'com.android.support:support-v4:25.4.0'
    implementation 'com.android.support:recyclerview-v7:25.4.0'
    implementation 'com.android.support:design:25.4.0'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
    testImplementation 'org.mockito:mockito-core:2.13.0'

    implementation 'io.reactivex:rxandroid:1.2.1'
    implementation "com.squareup.retrofit:retrofit:1.9.0"
    implementation "com.squareup.retrofit2:retrofit:$RETROFIT_VERSION"
    implementation "com.squareup.retrofit2:converter-gson:$RETROFIT_VERSION"
    testImplementation 'com.squareup.okhttp3:mockwebserver:3.8.1'

    annotationProcessor "com.jakewharton:butterknife-compiler:$BUTTERKNIFE_VERSION"
    implementation "com.jakewharton:butterknife:$BUTTERKNIFE_VERSION"

}
